{"ast":null,"code":"var _jsxFileName = \"F:\\\\360Downloads\\\\vs2019\\\\Microsoft VS Code\\\\juejin\\\\juejin-react\\\\src\\\\componments\\\\InfiniteScroll\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\"; // import ApiArt from '../ApiArt'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst THRESHOLD = 15;\n\nconst SlidingWindowScrollHook = props => {\n  _s();\n\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(THRESHOLD);\n  const [observer, setObserver] = useState(null);\n  const $bottomElement = useRef();\n  const $topElement = useRef();\n  useEffect(() => {\n    intiateScrollObserver();\n    return () => {\n      resetObservation();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [start, end]);\n\n  const intiateScrollObserver = () => {\n    const options = {\n      root: null,\n      rootMargin: '0px',\n      threshold: 0.1\n    };\n    const Observer = new IntersectionObserver(callback, options);\n\n    if ($topElement.current) {\n      Observer.observe($topElement.current);\n    }\n\n    if ($bottomElement.current) {\n      Observer.observe($bottomElement.current);\n    }\n\n    setObserver(Observer);\n  };\n\n  const callback = (entries, observer) => {\n    entries.forEach((entry, index) => {\n      const listLength = props.list.length; // Scroll Down\n\n      if (entry.isIntersecting && entry.target.id === \"bottom\") {\n        const maxStartIndex = listLength - 1 - THRESHOLD; // Maximum index value `start` can take\n\n        const maxEndIndex = listLength - 1; // Maximum index value `end` can take\n\n        const newEnd = end + 10 <= maxEndIndex ? end + 10 : maxEndIndex;\n        const newStart = end - 5 <= maxStartIndex ? end - 5 : maxStartIndex;\n        setStart(newStart);\n        setEnd(newEnd);\n      } // Scroll up\n\n\n      if (entry.isIntersecting && entry.target.id === \"top\") {\n        const newEnd = end === THRESHOLD ? THRESHOLD : end - 10 > THRESHOLD ? end - 10 : THRESHOLD;\n        let newStart = start === 0 ? 0 : start - 10 > 0 ? start - 10 : 0;\n        setStart(newStart);\n        setEnd(newEnd);\n      }\n    });\n  };\n\n  const getReference = (index, isLastIndex) => {\n    if (index === 0) return $topElement;\n    if (isLastIndex) return $bottomElement;\n    return null;\n  };\n\n  const {\n    list,\n    height\n  } = props;\n  const updatedList = list.slice(start, end);\n  const lastIndex = updatedList.length - 1;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    style: {\n      position: 'relative'\n    },\n    children: updatedList.map((item, index) => {\n      const top = height * (index + start) + 'px';\n      const refVal = getReference(index, index === lastIndex);\n      const id = index === 0 ? 'top' : index === lastIndex ? 'bottom' : '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"li-card\",\n          style: {\n            top\n          },\n          ref: refVal,\n          id: id,\n          children: item.value\n        }, item.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SlidingWindowScrollHook, \"4y6P+RbFs94f4isKpONtbZLrNkI=\");\n\n_c = SlidingWindowScrollHook;\nexport { SlidingWindowScrollHook };\n\nvar _c;\n\n$RefreshReg$(_c, \"SlidingWindowScrollHook\");","map":{"version":3,"sources":["F:/360Downloads/vs2019/Microsoft VS Code/juejin/juejin-react/src/componments/InfiniteScroll/index.js"],"names":["React","useState","useEffect","useRef","THRESHOLD","SlidingWindowScrollHook","props","start","setStart","end","setEnd","observer","setObserver","$bottomElement","$topElement","intiateScrollObserver","resetObservation","options","root","rootMargin","threshold","Observer","IntersectionObserver","callback","current","observe","entries","forEach","entry","index","listLength","list","length","isIntersecting","target","id","maxStartIndex","maxEndIndex","newEnd","newStart","getReference","isLastIndex","height","updatedList","slice","lastIndex","position","map","item","top","refVal","value","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n// import ApiArt from '../ApiArt'\r\n\r\nconst THRESHOLD = 15;\r\n \r\nconst SlidingWindowScrollHook = (props) =>  {\r\n  const [start, setStart] = useState(0);\r\n  const [end, setEnd] = useState(THRESHOLD);\r\n  const [observer, setObserver] = useState(null);\r\n  const $bottomElement = useRef();\r\n  const $topElement = useRef();\r\n \r\n  useEffect(() => {\r\n    intiateScrollObserver();\r\n    return () => {\r\n      resetObservation()\r\n  }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  },[start, end])\r\n \r\n  const intiateScrollObserver = () => {\r\n    const options = {\r\n      root: null,\r\n      rootMargin: '0px',\r\n      threshold: 0.1\r\n    };\r\n    const Observer = new IntersectionObserver(callback, options)\r\n    if ($topElement.current) {\r\n      Observer.observe($topElement.current);\r\n    }\r\n    if ($bottomElement.current) {\r\n      Observer.observe($bottomElement.current);\r\n    }\r\n    setObserver(Observer)    \r\n  }\r\n \r\n  const callback = (entries, observer) => {\r\n    entries.forEach((entry, index) => {\r\n      const listLength = props.list.length;\r\n      // Scroll Down\r\n      if (entry.isIntersecting && entry.target.id === \"bottom\") {\r\n        const maxStartIndex = listLength - 1 - THRESHOLD;     // Maximum index value `start` can take\r\n        const maxEndIndex = listLength - 1;                   // Maximum index value `end` can take\r\n        const newEnd = (end + 10) <= maxEndIndex ? end + 10 : maxEndIndex;\r\n        const newStart = (end - 5) <= maxStartIndex ? end - 5 : maxStartIndex;\r\n        setStart(newStart)\r\n        setEnd(newEnd)\r\n      }\r\n      // Scroll up\r\n      if (entry.isIntersecting && entry.target.id === \"top\") {\r\n        const newEnd = end === THRESHOLD ? THRESHOLD : (end - 10 > THRESHOLD ? end - 10 : THRESHOLD);\r\n        let newStart = start === 0 ? 0 : (start - 10 > 0 ? start - 10 : 0);\r\n        setStart(newStart)\r\n        setEnd(newEnd)\r\n      }\r\n \r\n    });\r\n  }\r\n \r\n  const getReference = (index, isLastIndex) => {\r\n    if (index === 0)\r\n      return $topElement;\r\n    if (isLastIndex) \r\n      return $bottomElement;\r\n    return null;\r\n  }\r\n \r\n  const {list, height} = props;\r\n  const updatedList = list.slice(start, end);\r\n  const lastIndex = updatedList.length - 1;\r\n \r\n  return (\r\n    <ul style={{position: 'relative'}}>\r\n      {updatedList.map((item, index) => {\r\n        const top = (height * (index + start)) + 'px';\r\n        const refVal = getReference(index, index === lastIndex);\r\n        const id = index === 0 ? 'top' : (index === lastIndex ? 'bottom' : '');\r\n        return (\r\n          <div>\r\n            {/* <ApiArt></ApiArt> */}\r\n            <li className=\"li-card\" key={item.key} style={{top}} ref={refVal} id={id}>{item.value}</li>\r\n          </div>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\nexport { SlidingWindowScrollHook };\r\n"]},"metadata":{},"sourceType":"module"}