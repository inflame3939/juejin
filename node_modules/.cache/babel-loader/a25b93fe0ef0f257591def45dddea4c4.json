{"ast":null,"code":"import { categories } from './data/categories';\nimport { articles } from './data/articles';\nimport { comments } from './data/comments';\n/**\n * 获取所有分类\n */\n\nexport async function getCategories() {\n  return {\n    code: 0,\n    data: {\n      categories\n    }\n  };\n}\n/**\n * 获取分类和排序获取文章列表\n * @param {*} category 文章分类 id\n * @param {*} sortBy 文章列表排序 'hot' 代表热门， 'new' 代表最新\n * @param {*} offset 分页参数参考 sql 的 offset 和 limit\n * @param {*} limit 同上\n */\n\nexport async function getArticles(categoryId = 0, sortBy = 'hot', offset = 0, limit = 10) {\n  const sortFunc = {\n    new: (a, b) => b.article_info.ctime - a.article_info.ctime,\n    hot: (a, b) => b.article_info.digg_count - a.article_info.digg_count\n  }[sortBy];\n  const articlesWithCategory = categoryId ? articles.filter(a => a.category_info.first_category_id === categoryId || a.category_info.second_category_id === categoryId) : articles;\n\n  if (sortFunc) {\n    articlesWithCategory.sort(sortFunc);\n  }\n\n  return {\n    code: 0,\n    data: {\n      articles: articlesWithCategory.slice(offset).slice(0, limit)\n    },\n    total: articlesWithCategory.length,\n    has_more: offset + limit < articlesWithCategory.length\n  };\n}\n/**\n * 根据文章 ID 获取文章\n * @param {*} articleId 文章 ID\n */\n\nexport async function getArticleById(articleId) {\n  const article = articles.find(a => a.article_id === articleId);\n\n  if (article) {\n    return {\n      code: 0,\n      data: {\n        article\n      }\n    };\n  }\n\n  return {\n    code: 404,\n    error_message: '找不到文章'\n  };\n}\n/**\n * 根据文章 ID 获取文章评论\n * @param {*} articleId 文章 ID\n * @param {*} offset 分页参数参考 sql 的 offset 和 limit\n * @param {*} limit 同上\n */\n\nexport async function getCommentsByArticleId(articleId, offset = 0, limit = 10) {\n  return {\n    code: 0,\n    data: {\n      article_id: articleId,\n      comments: comments.slice(offset).slice(0, limit)\n    },\n    total: comments.length,\n    has_more: offset + limit < comments.length\n  };\n}","map":{"version":3,"sources":["F:/360Downloads/vs2019/Microsoft VS Code/juejin/juejin-react/src/fake-api/index.js"],"names":["categories","articles","comments","getCategories","code","data","getArticles","categoryId","sortBy","offset","limit","sortFunc","new","a","b","article_info","ctime","hot","digg_count","articlesWithCategory","filter","category_info","first_category_id","second_category_id","sort","slice","total","length","has_more","getArticleById","articleId","article","find","article_id","error_message","getCommentsByArticleId"],"mappings":"AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA;AACA;AACA;;AACA,OAAO,eAAeC,aAAf,GAA+B;AACpC,SAAO;AACLC,IAAAA,IAAI,EAAE,CADD;AAELC,IAAAA,IAAI,EAAE;AACJL,MAAAA;AADI;AAFD,GAAP;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeM,WAAf,CAA2BC,UAAU,GAAG,CAAxC,EAA2CC,MAAM,GAAG,KAApD,EAA2DC,MAAM,GAAG,CAApE,EAAuEC,KAAK,GAAG,EAA/E,EAAmF;AACxF,QAAMC,QAAQ,GAAG;AACfC,IAAAA,GAAG,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,YAAF,CAAeC,KAAf,GAAuBH,CAAC,CAACE,YAAF,CAAeC,KADtC;AAEfC,IAAAA,GAAG,EAAE,CAACJ,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,YAAF,CAAeG,UAAf,GAA4BL,CAAC,CAACE,YAAF,CAAeG;AAF3C,IAGfV,MAHe,CAAjB;AAKA,QAAMW,oBAAoB,GAAGZ,UAAU,GACrCN,QAAQ,CAACmB,MAAT,CACEP,CAAC,IAAIA,CAAC,CAACQ,aAAF,CAAgBC,iBAAhB,KAAsCf,UAAtC,IAAoDM,CAAC,CAACQ,aAAF,CAAgBE,kBAAhB,KAAuChB,UADlG,CADqC,GAIrCN,QAJF;;AAMA,MAAIU,QAAJ,EAAc;AACZQ,IAAAA,oBAAoB,CAACK,IAArB,CAA0Bb,QAA1B;AACD;;AAED,SAAO;AACLP,IAAAA,IAAI,EAAE,CADD;AAELC,IAAAA,IAAI,EAAE;AACJJ,MAAAA,QAAQ,EAAEkB,oBAAoB,CAACM,KAArB,CAA2BhB,MAA3B,EAAmCgB,KAAnC,CAAyC,CAAzC,EAA4Cf,KAA5C;AADN,KAFD;AAKLgB,IAAAA,KAAK,EAAEP,oBAAoB,CAACQ,MALvB;AAMLC,IAAAA,QAAQ,EAAEnB,MAAM,GAAGC,KAAT,GAAiBS,oBAAoB,CAACQ;AAN3C,GAAP;AAQD;AAED;AACA;AACA;AACA;;AACA,OAAO,eAAeE,cAAf,CAA8BC,SAA9B,EAAyC;AAC9C,QAAMC,OAAO,GAAG9B,QAAQ,CAAC+B,IAAT,CAAcnB,CAAC,IAAIA,CAAC,CAACoB,UAAF,KAAiBH,SAApC,CAAhB;;AACA,MAAIC,OAAJ,EAAa;AACX,WAAO;AACL3B,MAAAA,IAAI,EAAE,CADD;AAELC,MAAAA,IAAI,EAAE;AAAE0B,QAAAA;AAAF;AAFD,KAAP;AAID;;AACD,SAAO;AACL3B,IAAAA,IAAI,EAAE,GADD;AAEL8B,IAAAA,aAAa,EAAE;AAFV,GAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,sBAAf,CAAsCL,SAAtC,EAAiDrB,MAAM,GAAG,CAA1D,EAA6DC,KAAK,GAAG,EAArE,EAAyE;AAC9E,SAAO;AACLN,IAAAA,IAAI,EAAE,CADD;AAELC,IAAAA,IAAI,EAAE;AACJ4B,MAAAA,UAAU,EAAEH,SADR;AAEJ5B,MAAAA,QAAQ,EAAEA,QAAQ,CAACuB,KAAT,CAAehB,MAAf,EAAuBgB,KAAvB,CAA6B,CAA7B,EAAgCf,KAAhC;AAFN,KAFD;AAMLgB,IAAAA,KAAK,EAAExB,QAAQ,CAACyB,MANX;AAOLC,IAAAA,QAAQ,EAAEnB,MAAM,GAAGC,KAAT,GAAiBR,QAAQ,CAACyB;AAP/B,GAAP;AASD","sourcesContent":["import { categories } from './data/categories';\nimport { articles } from './data/articles';\nimport { comments } from './data/comments';\n\n/**\n * 获取所有分类\n */\nexport async function getCategories() {\n  return {\n    code: 0,\n    data: {\n      categories,\n    },\n  };\n}\n\n/**\n * 获取分类和排序获取文章列表\n * @param {*} category 文章分类 id\n * @param {*} sortBy 文章列表排序 'hot' 代表热门， 'new' 代表最新\n * @param {*} offset 分页参数参考 sql 的 offset 和 limit\n * @param {*} limit 同上\n */\nexport async function getArticles(categoryId = 0, sortBy = 'hot', offset = 0, limit = 10) {\n  const sortFunc = {\n    new: (a, b) => b.article_info.ctime - a.article_info.ctime,\n    hot: (a, b) => b.article_info.digg_count - a.article_info.digg_count,\n  }[sortBy];\n\n  const articlesWithCategory = categoryId ?\n    articles.filter(\n      a => a.category_info.first_category_id === categoryId || a.category_info.second_category_id === categoryId\n    ) :\n    articles;\n\n  if (sortFunc) {\n    articlesWithCategory.sort(sortFunc);\n  }\n\n  return {\n    code: 0,\n    data: {\n      articles: articlesWithCategory.slice(offset).slice(0, limit),\n    },\n    total: articlesWithCategory.length,\n    has_more: offset + limit < articlesWithCategory.length,\n  };\n}\n\n/**\n * 根据文章 ID 获取文章\n * @param {*} articleId 文章 ID\n */\nexport async function getArticleById(articleId) {\n  const article = articles.find(a => a.article_id === articleId);\n  if (article) {\n    return {\n      code: 0,\n      data: { article },\n    };\n  }\n  return {\n    code: 404,\n    error_message: '找不到文章',\n  };\n}\n\n/**\n * 根据文章 ID 获取文章评论\n * @param {*} articleId 文章 ID\n * @param {*} offset 分页参数参考 sql 的 offset 和 limit\n * @param {*} limit 同上\n */\nexport async function getCommentsByArticleId(articleId, offset = 0, limit = 10) {\n  return {\n    code: 0,\n    data: {\n      article_id: articleId,\n      comments: comments.slice(offset).slice(0, limit),\n    },\n    total: comments.length,\n    has_more: offset + limit < comments.length,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}